* Description

Python utility to produce *a simple graph of the dependencies between
functions* in a Python module.

This is a simple home-made project, the aim of which is to teach myself how to
do this kind of analysis, learn how to package a Python module and enjoy some
nice time coding. Note that there are more elaborated projects already
existing (see below).

Disclaimer: while I try to make this code correct, there is no guarantee that
it is bug free! Use at your own risk!

** Installation

- You can clone the git repository with:
  #+BEGIN_SRC bash
  git clone https://github.com/matthieu-bruneaux/pydep.git
  #+END_SRC
- You can then install the module with:
  #+BEGIN_SRC bash
  sudo make install
  #+END_SRC
- To remove it, run (from the git repository folder):
  #+BEGIN_SRC bash
  sudo make uninstall
  #+END_SRC
  This will basically run =pip uninstall pydep= and remove the script from
  =/usr/bin/=.

** Usage

- You can produce a =.dot= file (to be processed by the =dot= utility from
  =graphviz=) from a Python module with:
  #+BEGIN_SRC bash
  pydep tests/exampleModule.py
  #+END_SRC
- A pdf or png version of the graph can then be obtained with:
  #+BEGIN_SRC bash
  dot -Tpdf exampleModule.graph.dot -o myGraph.pdf # pdf output
  dot -Tpng exampleModule.graph.dot -o myGraph.png # png output
  #+END_SRC

** Example output

Here is an example output:

[[https://github.com/matthieu-bruneaux/pyDep/blob/master/doc_examples/exampleModule.graph.png]]

The original Python file was:
#+BEGIN_SRC Python
def fib(n) :
    assert type(n) == int
    if n == 0 or n == 1 :
        return(1)
    else :
        return fib(n-1) + fib(n-2)

def sensibleFib(n) :
    if n < 20 :
        return fib(n)
    else :
        raise Exception("n is too large")

def makeDNAcomplement(dnaString) :
    validateDNAstring(dnaString)
    dnaComplementDict = {"A" : "T", "T" : "A", "G" : "C", "C" : "G"}
    complement = ""
    for nt in dnaString :
        complement += dnaComplementDict[nt]
    return complement

def makeDNAreverseComplement(dnaString) :
    validateDNAstring(dnaString)
    complement = list(makeDNAcomplement(dnaString))
    complement.reverse()
    return("".join(complement))

def validateDNAstring(dnaString) :
    if not isValidDNAstring(dnaString) :
        raise Exception("Not a valid DNA string")

def isValidDNAstring(dnaString) :
    allowedChar = "ATGC"
    return(all([x in allowedChar for x in dnaString]))

def transcribeDNA(dnaString) :
    validateDNAstring(dnaString)
    transcript = makeDNAcomplement(dnaString)
    transcript = transcript.replace("T", "U")
    return(transcript)

def simpleFunc(x) :
    return x

def evenSimplerFunc(x) :
    pass
#+END_SRC

The generated dot file was:
#+BEGIN_EXAMPLE
digraph G {
node[shape=box];
fib -> fib;
sensibleFib -> fib;
makeDNAreverseComplement -> makeDNAcomplement;
makeDNAreverseComplement -> validateDNAstring;
makeDNAcomplement -> validateDNAstring;
validateDNAstring -> isValidDNAstring;
transcribeDNA -> makeDNAcomplement;
transcribeDNA -> validateDNAstring;
}
#+END_EXAMPLE

** Makefile

A Makefile is provided, with the following actions (targets) among others:
- =make examples= :: run pyDep on simple example module files and process the
     produced dot files with =dot= to make pdf files
- =make test= :: run the project tests with =nosetests=. Coverage can be
                 visualized with a web browser afterwards. Requires =nose= and
                 =coverage= Python modules, which can be installed with =sudo
                 pip nose= and =sudo pip coverage=.
- =make clean= :: clean everything (pyc files, test files, examples files)

You can also just type =make= to get some summary help.

** Resources used

This project uses the =ast= built-in module from Python, about which I read
when looking at the =snakefood= project.

* Related projects

Those projects are more advanced and mature, that's probably what you want to
get if you need to analyse the dependencies in your project (disclaimer: this
is the result of a Google search, I didn't tested all of those projects
myself!). The list is not exhaustive and might miss some interesting projects:
- [[http://blog.poormansmath.net/pydepgraph-a-dependencies-analyzer-for-python/][pydepgraph]] by Stefano Maggiolo ([[https://github.com/stefano-maggiolo/pydepgraph][GitHub repo]])
- [[https://pythonhosted.org/modulegraph/][modulegraph]] by Ronald Oussoren
- [[http://pycallgraph.slowchop.com/en/master/][Python call graph]] by Gerald Kaszuba et al.
- [[http://furius.ca/snakefood/][snakefood]] by Martin Blais
- [[http://www.tarind.com/depgraph.html][py2depgraph]] by Toby Dickenson

